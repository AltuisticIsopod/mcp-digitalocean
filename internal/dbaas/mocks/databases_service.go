// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	godo "github.com/digitalocean/godo"
	mock "github.com/stretchr/testify/mock"
)

// DatabasesService is an autogenerated mock type for the DatabasesService type
type DatabasesService struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) Create(_a0 context.Context, _a1 *godo.DatabaseCreateRequest) (*godo.Database, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *godo.Database
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *godo.DatabaseCreateRequest) (*godo.Database, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *godo.DatabaseCreateRequest) *godo.Database); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Database)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *godo.DatabaseCreateRequest) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *godo.DatabaseCreateRequest) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateDB provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) CreateDB(_a0 context.Context, _a1 string, _a2 *godo.DatabaseCreateDBRequest) (*godo.DatabaseDB, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateDB")
	}

	var r0 *godo.DatabaseDB
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreateDBRequest) (*godo.DatabaseDB, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreateDBRequest) *godo.DatabaseDB); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseDB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.DatabaseCreateDBRequest) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.DatabaseCreateDBRequest) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateLogsink provides a mock function with given fields: ctx, databaseID, createLogsink
func (_m *DatabasesService) CreateLogsink(ctx context.Context, databaseID string, createLogsink *godo.DatabaseCreateLogsinkRequest) (*godo.DatabaseLogsink, *godo.Response, error) {
	ret := _m.Called(ctx, databaseID, createLogsink)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogsink")
	}

	var r0 *godo.DatabaseLogsink
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreateLogsinkRequest) (*godo.DatabaseLogsink, *godo.Response, error)); ok {
		return rf(ctx, databaseID, createLogsink)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreateLogsinkRequest) *godo.DatabaseLogsink); ok {
		r0 = rf(ctx, databaseID, createLogsink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseLogsink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.DatabaseCreateLogsinkRequest) *godo.Response); ok {
		r1 = rf(ctx, databaseID, createLogsink)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.DatabaseCreateLogsinkRequest) error); ok {
		r2 = rf(ctx, databaseID, createLogsink)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreatePool provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) CreatePool(_a0 context.Context, _a1 string, _a2 *godo.DatabaseCreatePoolRequest) (*godo.DatabasePool, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreatePool")
	}

	var r0 *godo.DatabasePool
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreatePoolRequest) (*godo.DatabasePool, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreatePoolRequest) *godo.DatabasePool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabasePool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.DatabaseCreatePoolRequest) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.DatabaseCreatePoolRequest) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateReplica provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) CreateReplica(_a0 context.Context, _a1 string, _a2 *godo.DatabaseCreateReplicaRequest) (*godo.DatabaseReplica, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplica")
	}

	var r0 *godo.DatabaseReplica
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreateReplicaRequest) (*godo.DatabaseReplica, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreateReplicaRequest) *godo.DatabaseReplica); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseReplica)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.DatabaseCreateReplicaRequest) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.DatabaseCreateReplicaRequest) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateTopic provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) CreateTopic(_a0 context.Context, _a1 string, _a2 *godo.DatabaseCreateTopicRequest) (*godo.DatabaseTopic, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopic")
	}

	var r0 *godo.DatabaseTopic
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreateTopicRequest) (*godo.DatabaseTopic, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreateTopicRequest) *godo.DatabaseTopic); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseTopic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.DatabaseCreateTopicRequest) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.DatabaseCreateTopicRequest) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) CreateUser(_a0 context.Context, _a1 string, _a2 *godo.DatabaseCreateUserRequest) (*godo.DatabaseUser, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *godo.DatabaseUser
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreateUserRequest) (*godo.DatabaseUser, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseCreateUserRequest) *godo.DatabaseUser); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.DatabaseCreateUserRequest) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.DatabaseCreateUserRequest) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) Delete(_a0 context.Context, _a1 string) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDB provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) DeleteDB(_a0 context.Context, _a1 string, _a2 string) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDB")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIndex provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) DeleteIndex(_a0 context.Context, _a1 string, _a2 string) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndex")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLogsink provides a mock function with given fields: ctx, databaseID, logsinkID
func (_m *DatabasesService) DeleteLogsink(ctx context.Context, databaseID string, logsinkID string) (*godo.Response, error) {
	ret := _m.Called(ctx, databaseID, logsinkID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLogsink")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.Response, error)); ok {
		return rf(ctx, databaseID, logsinkID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.Response); ok {
		r0 = rf(ctx, databaseID, logsinkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, databaseID, logsinkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePool provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) DeletePool(_a0 context.Context, _a1 string, _a2 string) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for DeletePool")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplica provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) DeleteReplica(_a0 context.Context, _a1 string, _a2 string) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplica")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTopic provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) DeleteTopic(_a0 context.Context, _a1 string, _a2 string) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopic")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) DeleteUser(_a0 context.Context, _a1 string, _a2 string) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) Get(_a0 context.Context, _a1 string) (*godo.Database, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *godo.Database
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*godo.Database, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.Database); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Database)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCA provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) GetCA(_a0 context.Context, _a1 string) (*godo.DatabaseCA, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCA")
	}

	var r0 *godo.DatabaseCA
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*godo.DatabaseCA, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.DatabaseCA); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseCA)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDB provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) GetDB(_a0 context.Context, _a1 string, _a2 string) (*godo.DatabaseDB, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *godo.DatabaseDB
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.DatabaseDB, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.DatabaseDB); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseDB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetEvictionPolicy provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) GetEvictionPolicy(_a0 context.Context, _a1 string) (string, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetEvictionPolicy")
	}

	var r0 string
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetFirewallRules provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) GetFirewallRules(_a0 context.Context, _a1 string) ([]godo.DatabaseFirewallRule, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetFirewallRules")
	}

	var r0 []godo.DatabaseFirewallRule
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]godo.DatabaseFirewallRule, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []godo.DatabaseFirewallRule); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.DatabaseFirewallRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetKafkaConfig provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) GetKafkaConfig(_a0 context.Context, _a1 string) (*godo.KafkaConfig, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetKafkaConfig")
	}

	var r0 *godo.KafkaConfig
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*godo.KafkaConfig, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.KafkaConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.KafkaConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetLogsink provides a mock function with given fields: ctx, databaseID, logsinkID
func (_m *DatabasesService) GetLogsink(ctx context.Context, databaseID string, logsinkID string) (*godo.DatabaseLogsink, *godo.Response, error) {
	ret := _m.Called(ctx, databaseID, logsinkID)

	if len(ret) == 0 {
		panic("no return value specified for GetLogsink")
	}

	var r0 *godo.DatabaseLogsink
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.DatabaseLogsink, *godo.Response, error)); ok {
		return rf(ctx, databaseID, logsinkID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.DatabaseLogsink); ok {
		r0 = rf(ctx, databaseID, logsinkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseLogsink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *godo.Response); ok {
		r1 = rf(ctx, databaseID, logsinkID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, databaseID, logsinkID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMetricsCredentials provides a mock function with given fields: _a0
func (_m *DatabasesService) GetMetricsCredentials(_a0 context.Context) (*godo.DatabaseMetricsCredentials, *godo.Response, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricsCredentials")
	}

	var r0 *godo.DatabaseMetricsCredentials
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*godo.DatabaseMetricsCredentials, *godo.Response, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *godo.DatabaseMetricsCredentials); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseMetricsCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *godo.Response); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMongoDBConfig provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) GetMongoDBConfig(_a0 context.Context, _a1 string) (*godo.MongoDBConfig, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetMongoDBConfig")
	}

	var r0 *godo.MongoDBConfig
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*godo.MongoDBConfig, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.MongoDBConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.MongoDBConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMySQLConfig provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) GetMySQLConfig(_a0 context.Context, _a1 string) (*godo.MySQLConfig, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetMySQLConfig")
	}

	var r0 *godo.MySQLConfig
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*godo.MySQLConfig, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.MySQLConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.MySQLConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOnlineMigrationStatus provides a mock function with given fields: ctx, databaseID
func (_m *DatabasesService) GetOnlineMigrationStatus(ctx context.Context, databaseID string) (*godo.DatabaseOnlineMigrationStatus, *godo.Response, error) {
	ret := _m.Called(ctx, databaseID)

	if len(ret) == 0 {
		panic("no return value specified for GetOnlineMigrationStatus")
	}

	var r0 *godo.DatabaseOnlineMigrationStatus
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*godo.DatabaseOnlineMigrationStatus, *godo.Response, error)); ok {
		return rf(ctx, databaseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.DatabaseOnlineMigrationStatus); ok {
		r0 = rf(ctx, databaseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseOnlineMigrationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(ctx, databaseID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, databaseID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOpensearchConfig provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) GetOpensearchConfig(_a0 context.Context, _a1 string) (*godo.OpensearchConfig, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOpensearchConfig")
	}

	var r0 *godo.OpensearchConfig
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*godo.OpensearchConfig, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.OpensearchConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.OpensearchConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPool provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) GetPool(_a0 context.Context, _a1 string, _a2 string) (*godo.DatabasePool, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetPool")
	}

	var r0 *godo.DatabasePool
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.DatabasePool, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.DatabasePool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabasePool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPostgreSQLConfig provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) GetPostgreSQLConfig(_a0 context.Context, _a1 string) (*godo.PostgreSQLConfig, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPostgreSQLConfig")
	}

	var r0 *godo.PostgreSQLConfig
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*godo.PostgreSQLConfig, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.PostgreSQLConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.PostgreSQLConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRedisConfig provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) GetRedisConfig(_a0 context.Context, _a1 string) (*godo.RedisConfig, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRedisConfig")
	}

	var r0 *godo.RedisConfig
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*godo.RedisConfig, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.RedisConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.RedisConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetReplica provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) GetReplica(_a0 context.Context, _a1 string, _a2 string) (*godo.DatabaseReplica, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetReplica")
	}

	var r0 *godo.DatabaseReplica
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.DatabaseReplica, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.DatabaseReplica); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseReplica)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSQLMode provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) GetSQLMode(_a0 context.Context, _a1 string) (string, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSQLMode")
	}

	var r0 string
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTopic provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) GetTopic(_a0 context.Context, _a1 string, _a2 string) (*godo.DatabaseTopic, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 *godo.DatabaseTopic
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.DatabaseTopic, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.DatabaseTopic); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseTopic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) GetUser(_a0 context.Context, _a1 string, _a2 string) (*godo.DatabaseUser, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *godo.DatabaseUser
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.DatabaseUser, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.DatabaseUser); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InstallUpdate provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) InstallUpdate(_a0 context.Context, _a1 string) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InstallUpdate")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) List(_a0 context.Context, _a1 *godo.ListOptions) ([]godo.Database, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []godo.Database
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *godo.ListOptions) ([]godo.Database, *godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *godo.ListOptions) []godo.Database); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.Database)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *godo.ListOptions) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListBackups provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) ListBackups(_a0 context.Context, _a1 string, _a2 *godo.ListOptions) ([]godo.DatabaseBackup, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ListBackups")
	}

	var r0 []godo.DatabaseBackup
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) ([]godo.DatabaseBackup, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) []godo.DatabaseBackup); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.DatabaseBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListDBs provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) ListDBs(_a0 context.Context, _a1 string, _a2 *godo.ListOptions) ([]godo.DatabaseDB, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ListDBs")
	}

	var r0 []godo.DatabaseDB
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) ([]godo.DatabaseDB, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) []godo.DatabaseDB); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.DatabaseDB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListDatabaseEvents provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) ListDatabaseEvents(_a0 context.Context, _a1 string, _a2 *godo.ListOptions) ([]godo.DatabaseEvent, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseEvents")
	}

	var r0 []godo.DatabaseEvent
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) ([]godo.DatabaseEvent, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) []godo.DatabaseEvent); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.DatabaseEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListIndexes provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) ListIndexes(_a0 context.Context, _a1 string, _a2 *godo.ListOptions) ([]godo.DatabaseIndex, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexes")
	}

	var r0 []godo.DatabaseIndex
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) ([]godo.DatabaseIndex, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) []godo.DatabaseIndex); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.DatabaseIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListLogsinks provides a mock function with given fields: ctx, databaseID, opts
func (_m *DatabasesService) ListLogsinks(ctx context.Context, databaseID string, opts *godo.ListOptions) ([]godo.DatabaseLogsink, *godo.Response, error) {
	ret := _m.Called(ctx, databaseID, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListLogsinks")
	}

	var r0 []godo.DatabaseLogsink
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) ([]godo.DatabaseLogsink, *godo.Response, error)); ok {
		return rf(ctx, databaseID, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) []godo.DatabaseLogsink); ok {
		r0 = rf(ctx, databaseID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.DatabaseLogsink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(ctx, databaseID, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.ListOptions) error); ok {
		r2 = rf(ctx, databaseID, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListOptions provides a mock function with given fields: todo
func (_m *DatabasesService) ListOptions(todo context.Context) (*godo.DatabaseOptions, *godo.Response, error) {
	ret := _m.Called(todo)

	if len(ret) == 0 {
		panic("no return value specified for ListOptions")
	}

	var r0 *godo.DatabaseOptions
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*godo.DatabaseOptions, *godo.Response, error)); ok {
		return rf(todo)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *godo.DatabaseOptions); ok {
		r0 = rf(todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseOptions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *godo.Response); ok {
		r1 = rf(todo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(todo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPools provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) ListPools(_a0 context.Context, _a1 string, _a2 *godo.ListOptions) ([]godo.DatabasePool, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ListPools")
	}

	var r0 []godo.DatabasePool
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) ([]godo.DatabasePool, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) []godo.DatabasePool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.DatabasePool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListReplicas provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) ListReplicas(_a0 context.Context, _a1 string, _a2 *godo.ListOptions) ([]godo.DatabaseReplica, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ListReplicas")
	}

	var r0 []godo.DatabaseReplica
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) ([]godo.DatabaseReplica, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) []godo.DatabaseReplica); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.DatabaseReplica)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTopics provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) ListTopics(_a0 context.Context, _a1 string, _a2 *godo.ListOptions) ([]godo.DatabaseTopic, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ListTopics")
	}

	var r0 []godo.DatabaseTopic
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) ([]godo.DatabaseTopic, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) []godo.DatabaseTopic); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.DatabaseTopic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListUsers provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) ListUsers(_a0 context.Context, _a1 string, _a2 *godo.ListOptions) ([]godo.DatabaseUser, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []godo.DatabaseUser
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) ([]godo.DatabaseUser, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) []godo.DatabaseUser); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]godo.DatabaseUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.ListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Migrate provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) Migrate(_a0 context.Context, _a1 string, _a2 *godo.DatabaseMigrateRequest) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseMigrateRequest) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseMigrateRequest) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.DatabaseMigrateRequest) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromoteReplicaToPrimary provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) PromoteReplicaToPrimary(_a0 context.Context, _a1 string, _a2 string) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for PromoteReplicaToPrimary")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetUserAuth provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *DatabasesService) ResetUserAuth(_a0 context.Context, _a1 string, _a2 string, _a3 *godo.DatabaseResetUserAuthRequest) (*godo.DatabaseUser, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for ResetUserAuth")
	}

	var r0 *godo.DatabaseUser
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.DatabaseResetUserAuthRequest) (*godo.DatabaseUser, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.DatabaseResetUserAuthRequest) *godo.DatabaseUser); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *godo.DatabaseResetUserAuthRequest) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, *godo.DatabaseResetUserAuthRequest) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Resize provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) Resize(_a0 context.Context, _a1 string, _a2 *godo.DatabaseResizeRequest) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Resize")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseResizeRequest) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseResizeRequest) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.DatabaseResizeRequest) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetEvictionPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) SetEvictionPolicy(_a0 context.Context, _a1 string, _a2 string) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SetEvictionPolicy")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSQLMode provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) SetSQLMode(_a0 context.Context, _a1 string, _a2 ...string) (*godo.Response, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetSQLMode")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartOnlineMigration provides a mock function with given fields: ctx, databaseID, onlineMigrationRequest
func (_m *DatabasesService) StartOnlineMigration(ctx context.Context, databaseID string, onlineMigrationRequest *godo.DatabaseStartOnlineMigrationRequest) (*godo.DatabaseOnlineMigrationStatus, *godo.Response, error) {
	ret := _m.Called(ctx, databaseID, onlineMigrationRequest)

	if len(ret) == 0 {
		panic("no return value specified for StartOnlineMigration")
	}

	var r0 *godo.DatabaseOnlineMigrationStatus
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseStartOnlineMigrationRequest) (*godo.DatabaseOnlineMigrationStatus, *godo.Response, error)); ok {
		return rf(ctx, databaseID, onlineMigrationRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseStartOnlineMigrationRequest) *godo.DatabaseOnlineMigrationStatus); ok {
		r0 = rf(ctx, databaseID, onlineMigrationRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseOnlineMigrationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.DatabaseStartOnlineMigrationRequest) *godo.Response); ok {
		r1 = rf(ctx, databaseID, onlineMigrationRequest)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.DatabaseStartOnlineMigrationRequest) error); ok {
		r2 = rf(ctx, databaseID, onlineMigrationRequest)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StopOnlineMigration provides a mock function with given fields: ctx, databaseID, migrationID
func (_m *DatabasesService) StopOnlineMigration(ctx context.Context, databaseID string, migrationID string) (*godo.Response, error) {
	ret := _m.Called(ctx, databaseID, migrationID)

	if len(ret) == 0 {
		panic("no return value specified for StopOnlineMigration")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*godo.Response, error)); ok {
		return rf(ctx, databaseID, migrationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.Response); ok {
		r0 = rf(ctx, databaseID, migrationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, databaseID, migrationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFirewallRules provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) UpdateFirewallRules(_a0 context.Context, _a1 string, _a2 *godo.DatabaseUpdateFirewallRulesRequest) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFirewallRules")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseUpdateFirewallRulesRequest) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseUpdateFirewallRulesRequest) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.DatabaseUpdateFirewallRulesRequest) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKafkaConfig provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) UpdateKafkaConfig(_a0 context.Context, _a1 string, _a2 *godo.KafkaConfig) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKafkaConfig")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.KafkaConfig) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.KafkaConfig) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.KafkaConfig) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLogsink provides a mock function with given fields: ctx, databaseID, logsinkID, updateLogsink
func (_m *DatabasesService) UpdateLogsink(ctx context.Context, databaseID string, logsinkID string, updateLogsink *godo.DatabaseUpdateLogsinkRequest) (*godo.Response, error) {
	ret := _m.Called(ctx, databaseID, logsinkID, updateLogsink)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLogsink")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.DatabaseUpdateLogsinkRequest) (*godo.Response, error)); ok {
		return rf(ctx, databaseID, logsinkID, updateLogsink)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.DatabaseUpdateLogsinkRequest) *godo.Response); ok {
		r0 = rf(ctx, databaseID, logsinkID, updateLogsink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *godo.DatabaseUpdateLogsinkRequest) error); ok {
		r1 = rf(ctx, databaseID, logsinkID, updateLogsink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMaintenance provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) UpdateMaintenance(_a0 context.Context, _a1 string, _a2 *godo.DatabaseUpdateMaintenanceRequest) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMaintenance")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseUpdateMaintenanceRequest) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.DatabaseUpdateMaintenanceRequest) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.DatabaseUpdateMaintenanceRequest) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetricsCredentials provides a mock function with given fields: _a0, _a1
func (_m *DatabasesService) UpdateMetricsCredentials(_a0 context.Context, _a1 *godo.DatabaseUpdateMetricsCredentialsRequest) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetricsCredentials")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *godo.DatabaseUpdateMetricsCredentialsRequest) (*godo.Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *godo.DatabaseUpdateMetricsCredentialsRequest) *godo.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *godo.DatabaseUpdateMetricsCredentialsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMongoDBConfig provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) UpdateMongoDBConfig(_a0 context.Context, _a1 string, _a2 *godo.MongoDBConfig) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMongoDBConfig")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.MongoDBConfig) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.MongoDBConfig) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.MongoDBConfig) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMySQLConfig provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) UpdateMySQLConfig(_a0 context.Context, _a1 string, _a2 *godo.MySQLConfig) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMySQLConfig")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.MySQLConfig) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.MySQLConfig) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.MySQLConfig) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOpensearchConfig provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) UpdateOpensearchConfig(_a0 context.Context, _a1 string, _a2 *godo.OpensearchConfig) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOpensearchConfig")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.OpensearchConfig) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.OpensearchConfig) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.OpensearchConfig) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePool provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *DatabasesService) UpdatePool(_a0 context.Context, _a1 string, _a2 string, _a3 *godo.DatabaseUpdatePoolRequest) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePool")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.DatabaseUpdatePoolRequest) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.DatabaseUpdatePoolRequest) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *godo.DatabaseUpdatePoolRequest) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePostgreSQLConfig provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) UpdatePostgreSQLConfig(_a0 context.Context, _a1 string, _a2 *godo.PostgreSQLConfig) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostgreSQLConfig")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.PostgreSQLConfig) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.PostgreSQLConfig) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.PostgreSQLConfig) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRedisConfig provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) UpdateRedisConfig(_a0 context.Context, _a1 string, _a2 *godo.RedisConfig) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRedisConfig")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.RedisConfig) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.RedisConfig) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.RedisConfig) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTopic provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *DatabasesService) UpdateTopic(_a0 context.Context, _a1 string, _a2 string, _a3 *godo.DatabaseUpdateTopicRequest) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTopic")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.DatabaseUpdateTopicRequest) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.DatabaseUpdateTopicRequest) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *godo.DatabaseUpdateTopicRequest) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *DatabasesService) UpdateUser(_a0 context.Context, _a1 string, _a2 string, _a3 *godo.DatabaseUpdateUserRequest) (*godo.DatabaseUser, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *godo.DatabaseUser
	var r1 *godo.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.DatabaseUpdateUserRequest) (*godo.DatabaseUser, *godo.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.DatabaseUpdateUserRequest) *godo.DatabaseUser); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.DatabaseUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *godo.DatabaseUpdateUserRequest) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, *godo.DatabaseUpdateUserRequest) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpgradeMajorVersion provides a mock function with given fields: _a0, _a1, _a2
func (_m *DatabasesService) UpgradeMajorVersion(_a0 context.Context, _a1 string, _a2 *godo.UpgradeVersionRequest) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeMajorVersion")
	}

	var r0 *godo.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.UpgradeVersionRequest) (*godo.Response, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.UpgradeVersionRequest) *godo.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.UpgradeVersionRequest) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatabasesService creates a new instance of DatabasesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabasesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabasesService {
	mock := &DatabasesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
